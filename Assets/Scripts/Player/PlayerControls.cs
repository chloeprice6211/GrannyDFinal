//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.13.1
//     from Assets/Scripts/Player/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Scripts/Player/PlayerControls.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""6483e486-df3d-415b-b713-8028add4f430"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""929b44c4-dd12-4b43-887c-41f763ba98bc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""00a71631-4488-42eb-87cb-9d12e84888f9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""949742d5-f74f-4465-b531-05009435645b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AlternativeInteract"",
                    ""type"": ""Button"",
                    ""id"": ""8347e8ce-80b6-402e-acd2-f9360bf9b353"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hold Action"",
                    ""type"": ""Button"",
                    ""id"": ""371a55a8-d48e-43c5-85b4-ce4dc9938482"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""586b30f6-f689-4b7f-a0a6-f183ba69b36e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenJournal"",
                    ""type"": ""Button"",
                    ""id"": ""eb785d9e-85b4-4b01-be69-e9f95f90a76c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""052378a0-841d-4637-b65b-c1f4d0b78ada"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DropItem"",
                    ""type"": ""Button"",
                    ""id"": ""625ad35c-d8a3-4cce-a9ad-007a66e2ceb2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""60ff9dee-d482-46fa-93fa-576d68f5f870"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Highlight"",
                    ""type"": ""Button"",
                    ""id"": ""ab6a1537-f0b0-403f-84ba-95dd421facdc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inspect"",
                    ""type"": ""Button"",
                    ""id"": ""6294d1b6-6daa-43d5-9038-d4c9bf446b0f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Tutorial"",
                    ""type"": ""Button"",
                    ""id"": ""e90f69de-ad73-485a-b1d2-a58bac83ed8c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""76454055-45e4-4f3f-a42a-1c57e62d5358"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""00ca640b-d935-4593-8157-c05846ea39b3"",
                    ""path"": ""Dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e2062cb9-1b15-46a2-838c-2f8d72a0bdd9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8180e8bd-4097-4f4e-ab88-4523101a6ce9"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""320bffee-a40b-4347-ac70-c210eb8bc73a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1c5327b5-f71c-4f60-99c7-4e737386f1d1"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d2581a9b-1d11-4566-b27d-b92aff5fabbc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2e46982e-44cc-431b-9f0b-c11910bf467a"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""fcfe95b8-67b9-4526-84b5-5d0bc98d6400"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""77bff152-3580-4b21-b6de-dcd0c7e41164"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c1f7a91b-d0fd-4a62-997e-7fb9b69bf235"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8c8e490b-c610-4785-884f-f04217b23ca4"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse;Touch"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3e5f5442-8668-4b27-a940-df99bad7e831"",
                    ""path"": ""<Joystick>/{Hatswitch}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3d7a63b1-6491-46e8-a1b9-747d7ef25c9d"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""51b3b429-0ced-46d0-8430-5fa1ae000fdb"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AlternativeInteract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""72801ded-30ab-4830-8e4f-1bcb5843ac17"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Hold Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea6af889-a2fc-4b9c-8b59-de0c3b20deee"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d540d3b-bb4c-428b-b256-fe4b06c5ad83"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenJournal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a988c4ca-f79e-4339-9861-3ba6fd6b3fb5"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b8eef1b-1678-45e3-88fe-39ccd760a144"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""DropItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""075d11f4-0c22-4281-90ec-f0c19fc2572a"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5f5809f-b5b4-4738-89b3-0f9a8545a2cc"",
                    ""path"": ""<Keyboard>/f2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Highlight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c49c9979-ea8a-411c-883f-89c48a2cb72a"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inspect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""376221ca-c6e1-4d50-98bb-5cf7e3b519a6"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tutorial"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7ab69ae4-473d-4ed2-8551-b571ecc1c18e"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""a4de09bf-1500-43a4-b366-de375fa66e0d"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""8aea1d09-a8b8-48f0-8091-4b069210d0cc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ReaderIn"",
                    ""type"": ""Button"",
                    ""id"": ""47a2ea7b-959d-414b-a3d9-18915541868a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ReaderOut"",
                    ""type"": ""Button"",
                    ""id"": ""7e268f33-f52d-42d6-afe1-f95a044b0e0f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InventoryInOut"",
                    ""type"": ""Button"",
                    ""id"": ""711226c2-8c69-4420-a1cc-1b44d05effe3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9b36df2b-91cc-494a-89f5-414eb1e0d18e"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""82bb0589-f2d0-4dd5-bf13-c5d1b3935a04"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ReaderIn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9adc7700-bc77-4bda-89a6-3b4a69769d28"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ReaderOut"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ecedca08-02ad-4397-95e7-7f0141026acc"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InventoryInOut"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Chair"",
            ""id"": ""cb982cb1-dafb-4697-9ada-8681f29ebe01"",
            ""actions"": [
                {
                    ""name"": ""Release"",
                    ""type"": ""Button"",
                    ""id"": ""5131bf2b-fe1c-466e-a5f5-c3af743b6b59"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4e5dd7fc-9c20-4cfa-a16a-bc56c93f5dd9"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Release"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Car"",
            ""id"": ""9c4bd333-64a9-4b39-b49d-914b07c08daa"",
            ""actions"": [
                {
                    ""name"": ""Power"",
                    ""type"": ""Button"",
                    ""id"": ""94a91082-afc3-479a-9f58-4f3943a0e4b2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Start"",
                    ""type"": ""Button"",
                    ""id"": ""18a5c628-85b7-4010-a77c-b3dce45d0744"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""af767cda-9a05-4b71-b0cf-b77267bb7708"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ReverseMove"",
                    ""type"": ""Button"",
                    ""id"": ""bf55ac20-7f1f-4937-a733-8ad480c86644"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""52db608e-0914-40e5-b716-659a03163e74"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Power"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""79a77b97-396e-4eef-8af0-759bf2064863"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4317d29e-6101-43d1-ae6a-0a979f4aac1b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""939c7ddc-314d-435a-b3b4-d71a1c13bf40"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ReverseMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Note"",
            ""id"": ""00250df7-0256-4980-b38e-476a2ee335b7"",
            ""actions"": [
                {
                    ""name"": ""Collect"",
                    ""type"": ""Button"",
                    ""id"": ""5980d127-9840-4fe9-a868-65e271fc8030"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""25e77eb1-056c-4e30-bf9f-3b917e8a26e1"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Collect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Journal"",
            ""id"": ""1fe2c54b-2bf1-4f9e-bfad-f21792addd1c"",
            ""actions"": [
                {
                    ""name"": ""Next"",
                    ""type"": ""Button"",
                    ""id"": ""d17c3d43-f3af-4cd6-b23c-d37981d9893e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Previous"",
                    ""type"": ""Button"",
                    ""id"": ""1d09e761-f7c6-4274-9649-82d2ca2c9d9a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3fc023a1-f855-4547-9635-eca890a8d78e"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""LobbyPlayer"",
            ""id"": ""585aae63-723c-44c6-bd89-b96414a15bec"",
            ""actions"": [
                {
                    ""name"": ""Ready"",
                    ""type"": ""Button"",
                    ""id"": ""b335160f-c5e4-4dcd-8842-b05a6f56125b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Message Send"",
                    ""type"": ""Button"",
                    ""id"": ""429b4376-67a2-4434-9b3b-6574ace7b005"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Return"",
                    ""type"": ""Button"",
                    ""id"": ""38ffbe50-c29f-4a73-8837-4f1ce01da523"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4f0c7832-6574-4b13-9af1-ccda2ece9d83"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ready"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6871387-128b-44f6-b1f1-c3b286cce737"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Message Send"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""768d9ce5-0aec-44c7-9fc2-4cf4ba48393c"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Return"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Device"",
            ""id"": ""3084f6ea-cd78-4af1-9b99-4dd4f9da356b"",
            ""actions"": [
                {
                    ""name"": ""Use"",
                    ""type"": ""Button"",
                    ""id"": ""45808ef9-0087-495e-afb3-2b1b7cd1af03"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""b4b65818-143e-4422-b3c5-89034a40a412"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6c10dcc3-da71-492a-abd7-da364ca52b21"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Use"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a58dadbc-102a-410e-b85e-9d358f13457c"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Tool"",
            ""id"": ""15ca2972-716c-4eec-93a0-6be6e73e1c77"",
            ""actions"": [
                {
                    ""name"": ""Operate"",
                    ""type"": ""Button"",
                    ""id"": ""c5617454-9454-4051-9352-3ad2b02ec817"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4067c46a-e8b1-4f37-993d-c2ff759fb3cb"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Operate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PillBottle"",
            ""id"": ""39bf2939-c157-4481-9fe9-83ced225a27b"",
            ""actions"": [
                {
                    ""name"": ""TakePill"",
                    ""type"": ""Button"",
                    ""id"": ""57cf573a-90f8-4352-aec2-8d9e9ad6d822"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c9d80ed9-183b-499c-af62-ea38697e3afe"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TakePill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Flashlight"",
            ""id"": ""cd6daff1-a689-4e05-ba8b-97185f692e3d"",
            ""actions"": [
                {
                    ""name"": ""Switch"",
                    ""type"": ""Button"",
                    ""id"": ""aa5427eb-658a-495b-8005-9caa20c6f15a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""baa2a3f1-b7ce-4769-a6da-e23ef4f1a9d8"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Spectate"",
            ""id"": ""1c52961a-3ec5-4f8c-9891-d37bab771ecc"",
            ""actions"": [
                {
                    ""name"": ""Next"",
                    ""type"": ""Button"",
                    ""id"": ""f31bb2e4-9f9c-4c6d-b000-383d306a7008"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""31b19a31-8f4c-419f-9056-e7ea396dc6d2"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Next"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""FocusObject"",
            ""id"": ""4d073bf2-13a8-436c-b5c7-d742f7e5ac38"",
            ""actions"": [
                {
                    ""name"": ""Release"",
                    ""type"": ""Button"",
                    ""id"": ""6e7f5893-9f70-4016-b287-f7f6135c6e6b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e3e8f3dd-9252-4e35-85d0-0c47ef2b26dc"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Release"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Inventory"",
            ""id"": ""c5341837-7e51-4705-a65a-a818daffbc3a"",
            ""actions"": [
                {
                    ""name"": ""GetFirstInventorySlot"",
                    ""type"": ""Button"",
                    ""id"": ""0337dbe0-e3c9-456c-8320-a9ef98fbf1ca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InventoryInOut"",
                    ""type"": ""Button"",
                    ""id"": ""6fafb650-ee42-438a-9168-a5ae0a664a73"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a86a06ef-092c-423f-b09f-346c352db126"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GetFirstInventorySlot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""023067d1-e304-494b-b239-27cf9eb12ec1"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GetFirstInventorySlot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f4ca3426-249c-4476-aadb-2249986b3e81"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GetFirstInventorySlot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""21b6f99e-c800-4dca-bfbd-36c6109afc95"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GetFirstInventorySlot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d70133bb-cc74-4641-b351-02eb00053b47"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InventoryInOut"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Development"",
            ""id"": ""6f82052e-08e4-4781-b763-daafa46edc71"",
            ""actions"": [
                {
                    ""name"": ""console"",
                    ""type"": ""Button"",
                    ""id"": ""bb207731-4937-40ae-b505-00a565b8917e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""consoleEnter"",
                    ""type"": ""Button"",
                    ""id"": ""6ed01e05-92ee-4d03-ab37-3f81727963dc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c1386c1d-f66c-4a02-9242-dbdfffd00c84"",
                    ""path"": ""<Keyboard>/backquote"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""console"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""61f3a6e8-a620-46b4-a109-18c9c447e0c4"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""consoleEnter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Lockpick"",
            ""id"": ""84737aae-6152-4acb-9715-5451229371cc"",
            ""actions"": [
                {
                    ""name"": ""lockpickActions"",
                    ""type"": ""Button"",
                    ""id"": ""f698d459-9c5b-4c6a-9a70-be5d805fab04"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fdf16b1d-e2c6-489f-859f-b1f9628da00f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""lockpickActions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8c059654-4197-457f-8462-910a9503fc9e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""lockpickActions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""42371ffe-0be3-4e58-8745-6a0a35a09e6d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""lockpickActions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Look = m_Player.FindAction("Look", throwIfNotFound: true);
        m_Player_Interact = m_Player.FindAction("Interact", throwIfNotFound: true);
        m_Player_AlternativeInteract = m_Player.FindAction("AlternativeInteract", throwIfNotFound: true);
        m_Player_HoldAction = m_Player.FindAction("Hold Action", throwIfNotFound: true);
        m_Player_Pause = m_Player.FindAction("Pause", throwIfNotFound: true);
        m_Player_OpenJournal = m_Player.FindAction("OpenJournal", throwIfNotFound: true);
        m_Player_Crouch = m_Player.FindAction("Crouch", throwIfNotFound: true);
        m_Player_DropItem = m_Player.FindAction("DropItem", throwIfNotFound: true);
        m_Player_Sprint = m_Player.FindAction("Sprint", throwIfNotFound: true);
        m_Player_Highlight = m_Player.FindAction("Highlight", throwIfNotFound: true);
        m_Player_Inspect = m_Player.FindAction("Inspect", throwIfNotFound: true);
        m_Player_Tutorial = m_Player.FindAction("Tutorial", throwIfNotFound: true);
        m_Player_Inventory = m_Player.FindAction("Inventory", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Pause = m_UI.FindAction("Pause", throwIfNotFound: true);
        m_UI_ReaderIn = m_UI.FindAction("ReaderIn", throwIfNotFound: true);
        m_UI_ReaderOut = m_UI.FindAction("ReaderOut", throwIfNotFound: true);
        m_UI_InventoryInOut = m_UI.FindAction("InventoryInOut", throwIfNotFound: true);
        // Chair
        m_Chair = asset.FindActionMap("Chair", throwIfNotFound: true);
        m_Chair_Release = m_Chair.FindAction("Release", throwIfNotFound: true);
        // Car
        m_Car = asset.FindActionMap("Car", throwIfNotFound: true);
        m_Car_Power = m_Car.FindAction("Power", throwIfNotFound: true);
        m_Car_Start = m_Car.FindAction("Start", throwIfNotFound: true);
        m_Car_Move = m_Car.FindAction("Move", throwIfNotFound: true);
        m_Car_ReverseMove = m_Car.FindAction("ReverseMove", throwIfNotFound: true);
        // Note
        m_Note = asset.FindActionMap("Note", throwIfNotFound: true);
        m_Note_Collect = m_Note.FindAction("Collect", throwIfNotFound: true);
        // Journal
        m_Journal = asset.FindActionMap("Journal", throwIfNotFound: true);
        m_Journal_Next = m_Journal.FindAction("Next", throwIfNotFound: true);
        m_Journal_Previous = m_Journal.FindAction("Previous", throwIfNotFound: true);
        // LobbyPlayer
        m_LobbyPlayer = asset.FindActionMap("LobbyPlayer", throwIfNotFound: true);
        m_LobbyPlayer_Ready = m_LobbyPlayer.FindAction("Ready", throwIfNotFound: true);
        m_LobbyPlayer_MessageSend = m_LobbyPlayer.FindAction("Message Send", throwIfNotFound: true);
        m_LobbyPlayer_Return = m_LobbyPlayer.FindAction("Return", throwIfNotFound: true);
        // Device
        m_Device = asset.FindActionMap("Device", throwIfNotFound: true);
        m_Device_Use = m_Device.FindAction("Use", throwIfNotFound: true);
        m_Device_Exit = m_Device.FindAction("Exit", throwIfNotFound: true);
        // Tool
        m_Tool = asset.FindActionMap("Tool", throwIfNotFound: true);
        m_Tool_Operate = m_Tool.FindAction("Operate", throwIfNotFound: true);
        // PillBottle
        m_PillBottle = asset.FindActionMap("PillBottle", throwIfNotFound: true);
        m_PillBottle_TakePill = m_PillBottle.FindAction("TakePill", throwIfNotFound: true);
        // Flashlight
        m_Flashlight = asset.FindActionMap("Flashlight", throwIfNotFound: true);
        m_Flashlight_Switch = m_Flashlight.FindAction("Switch", throwIfNotFound: true);
        // Spectate
        m_Spectate = asset.FindActionMap("Spectate", throwIfNotFound: true);
        m_Spectate_Next = m_Spectate.FindAction("Next", throwIfNotFound: true);
        // FocusObject
        m_FocusObject = asset.FindActionMap("FocusObject", throwIfNotFound: true);
        m_FocusObject_Release = m_FocusObject.FindAction("Release", throwIfNotFound: true);
        // Inventory
        m_Inventory = asset.FindActionMap("Inventory", throwIfNotFound: true);
        m_Inventory_GetFirstInventorySlot = m_Inventory.FindAction("GetFirstInventorySlot", throwIfNotFound: true);
        m_Inventory_InventoryInOut = m_Inventory.FindAction("InventoryInOut", throwIfNotFound: true);
        // Development
        m_Development = asset.FindActionMap("Development", throwIfNotFound: true);
        m_Development_console = m_Development.FindAction("console", throwIfNotFound: true);
        m_Development_consoleEnter = m_Development.FindAction("consoleEnter", throwIfNotFound: true);
        // Lockpick
        m_Lockpick = asset.FindActionMap("Lockpick", throwIfNotFound: true);
        m_Lockpick_lockpickActions = m_Lockpick.FindAction("lockpickActions", throwIfNotFound: true);
    }

    ~@PlayerControls()
    {
        UnityEngine.Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, PlayerControls.Player.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_UI.enabled, "This will cause a leak and performance issues, PlayerControls.UI.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Chair.enabled, "This will cause a leak and performance issues, PlayerControls.Chair.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Car.enabled, "This will cause a leak and performance issues, PlayerControls.Car.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Note.enabled, "This will cause a leak and performance issues, PlayerControls.Note.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Journal.enabled, "This will cause a leak and performance issues, PlayerControls.Journal.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_LobbyPlayer.enabled, "This will cause a leak and performance issues, PlayerControls.LobbyPlayer.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Device.enabled, "This will cause a leak and performance issues, PlayerControls.Device.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Tool.enabled, "This will cause a leak and performance issues, PlayerControls.Tool.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_PillBottle.enabled, "This will cause a leak and performance issues, PlayerControls.PillBottle.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Flashlight.enabled, "This will cause a leak and performance issues, PlayerControls.Flashlight.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Spectate.enabled, "This will cause a leak and performance issues, PlayerControls.Spectate.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_FocusObject.enabled, "This will cause a leak and performance issues, PlayerControls.FocusObject.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Inventory.enabled, "This will cause a leak and performance issues, PlayerControls.Inventory.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Development.enabled, "This will cause a leak and performance issues, PlayerControls.Development.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Lockpick.enabled, "This will cause a leak and performance issues, PlayerControls.Lockpick.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Look;
    private readonly InputAction m_Player_Interact;
    private readonly InputAction m_Player_AlternativeInteract;
    private readonly InputAction m_Player_HoldAction;
    private readonly InputAction m_Player_Pause;
    private readonly InputAction m_Player_OpenJournal;
    private readonly InputAction m_Player_Crouch;
    private readonly InputAction m_Player_DropItem;
    private readonly InputAction m_Player_Sprint;
    private readonly InputAction m_Player_Highlight;
    private readonly InputAction m_Player_Inspect;
    private readonly InputAction m_Player_Tutorial;
    private readonly InputAction m_Player_Inventory;
    /// <summary>
    /// Provides access to input actions defined in input action map "Player".
    /// </summary>
    public struct PlayerActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public PlayerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Player/Move".
        /// </summary>
        public InputAction @Move => m_Wrapper.m_Player_Move;
        /// <summary>
        /// Provides access to the underlying input action "Player/Look".
        /// </summary>
        public InputAction @Look => m_Wrapper.m_Player_Look;
        /// <summary>
        /// Provides access to the underlying input action "Player/Interact".
        /// </summary>
        public InputAction @Interact => m_Wrapper.m_Player_Interact;
        /// <summary>
        /// Provides access to the underlying input action "Player/AlternativeInteract".
        /// </summary>
        public InputAction @AlternativeInteract => m_Wrapper.m_Player_AlternativeInteract;
        /// <summary>
        /// Provides access to the underlying input action "Player/HoldAction".
        /// </summary>
        public InputAction @HoldAction => m_Wrapper.m_Player_HoldAction;
        /// <summary>
        /// Provides access to the underlying input action "Player/Pause".
        /// </summary>
        public InputAction @Pause => m_Wrapper.m_Player_Pause;
        /// <summary>
        /// Provides access to the underlying input action "Player/OpenJournal".
        /// </summary>
        public InputAction @OpenJournal => m_Wrapper.m_Player_OpenJournal;
        /// <summary>
        /// Provides access to the underlying input action "Player/Crouch".
        /// </summary>
        public InputAction @Crouch => m_Wrapper.m_Player_Crouch;
        /// <summary>
        /// Provides access to the underlying input action "Player/DropItem".
        /// </summary>
        public InputAction @DropItem => m_Wrapper.m_Player_DropItem;
        /// <summary>
        /// Provides access to the underlying input action "Player/Sprint".
        /// </summary>
        public InputAction @Sprint => m_Wrapper.m_Player_Sprint;
        /// <summary>
        /// Provides access to the underlying input action "Player/Highlight".
        /// </summary>
        public InputAction @Highlight => m_Wrapper.m_Player_Highlight;
        /// <summary>
        /// Provides access to the underlying input action "Player/Inspect".
        /// </summary>
        public InputAction @Inspect => m_Wrapper.m_Player_Inspect;
        /// <summary>
        /// Provides access to the underlying input action "Player/Tutorial".
        /// </summary>
        public InputAction @Tutorial => m_Wrapper.m_Player_Tutorial;
        /// <summary>
        /// Provides access to the underlying input action "Player/Inventory".
        /// </summary>
        public InputAction @Inventory => m_Wrapper.m_Player_Inventory;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="PlayerActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="PlayerActions" />
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @AlternativeInteract.started += instance.OnAlternativeInteract;
            @AlternativeInteract.performed += instance.OnAlternativeInteract;
            @AlternativeInteract.canceled += instance.OnAlternativeInteract;
            @HoldAction.started += instance.OnHoldAction;
            @HoldAction.performed += instance.OnHoldAction;
            @HoldAction.canceled += instance.OnHoldAction;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @OpenJournal.started += instance.OnOpenJournal;
            @OpenJournal.performed += instance.OnOpenJournal;
            @OpenJournal.canceled += instance.OnOpenJournal;
            @Crouch.started += instance.OnCrouch;
            @Crouch.performed += instance.OnCrouch;
            @Crouch.canceled += instance.OnCrouch;
            @DropItem.started += instance.OnDropItem;
            @DropItem.performed += instance.OnDropItem;
            @DropItem.canceled += instance.OnDropItem;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
            @Highlight.started += instance.OnHighlight;
            @Highlight.performed += instance.OnHighlight;
            @Highlight.canceled += instance.OnHighlight;
            @Inspect.started += instance.OnInspect;
            @Inspect.performed += instance.OnInspect;
            @Inspect.canceled += instance.OnInspect;
            @Tutorial.started += instance.OnTutorial;
            @Tutorial.performed += instance.OnTutorial;
            @Tutorial.canceled += instance.OnTutorial;
            @Inventory.started += instance.OnInventory;
            @Inventory.performed += instance.OnInventory;
            @Inventory.canceled += instance.OnInventory;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="PlayerActions" />
        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @AlternativeInteract.started -= instance.OnAlternativeInteract;
            @AlternativeInteract.performed -= instance.OnAlternativeInteract;
            @AlternativeInteract.canceled -= instance.OnAlternativeInteract;
            @HoldAction.started -= instance.OnHoldAction;
            @HoldAction.performed -= instance.OnHoldAction;
            @HoldAction.canceled -= instance.OnHoldAction;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @OpenJournal.started -= instance.OnOpenJournal;
            @OpenJournal.performed -= instance.OnOpenJournal;
            @OpenJournal.canceled -= instance.OnOpenJournal;
            @Crouch.started -= instance.OnCrouch;
            @Crouch.performed -= instance.OnCrouch;
            @Crouch.canceled -= instance.OnCrouch;
            @DropItem.started -= instance.OnDropItem;
            @DropItem.performed -= instance.OnDropItem;
            @DropItem.canceled -= instance.OnDropItem;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
            @Highlight.started -= instance.OnHighlight;
            @Highlight.performed -= instance.OnHighlight;
            @Highlight.canceled -= instance.OnHighlight;
            @Inspect.started -= instance.OnInspect;
            @Inspect.performed -= instance.OnInspect;
            @Inspect.canceled -= instance.OnInspect;
            @Tutorial.started -= instance.OnTutorial;
            @Tutorial.performed -= instance.OnTutorial;
            @Tutorial.canceled -= instance.OnTutorial;
            @Inventory.started -= instance.OnInventory;
            @Inventory.performed -= instance.OnInventory;
            @Inventory.canceled -= instance.OnInventory;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="PlayerActions.UnregisterCallbacks(IPlayerActions)" />.
        /// </summary>
        /// <seealso cref="PlayerActions.UnregisterCallbacks(IPlayerActions)" />
        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="PlayerActions.AddCallbacks(IPlayerActions)" />
        /// <seealso cref="PlayerActions.RemoveCallbacks(IPlayerActions)" />
        /// <seealso cref="PlayerActions.UnregisterCallbacks(IPlayerActions)" />
        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="PlayerActions" /> instance referencing this action map.
    /// </summary>
    public PlayerActions @Player => new PlayerActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_Pause;
    private readonly InputAction m_UI_ReaderIn;
    private readonly InputAction m_UI_ReaderOut;
    private readonly InputAction m_UI_InventoryInOut;
    /// <summary>
    /// Provides access to input actions defined in input action map "UI".
    /// </summary>
    public struct UIActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public UIActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "UI/Pause".
        /// </summary>
        public InputAction @Pause => m_Wrapper.m_UI_Pause;
        /// <summary>
        /// Provides access to the underlying input action "UI/ReaderIn".
        /// </summary>
        public InputAction @ReaderIn => m_Wrapper.m_UI_ReaderIn;
        /// <summary>
        /// Provides access to the underlying input action "UI/ReaderOut".
        /// </summary>
        public InputAction @ReaderOut => m_Wrapper.m_UI_ReaderOut;
        /// <summary>
        /// Provides access to the underlying input action "UI/InventoryInOut".
        /// </summary>
        public InputAction @InventoryInOut => m_Wrapper.m_UI_InventoryInOut;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="UIActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="UIActions" />
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @ReaderIn.started += instance.OnReaderIn;
            @ReaderIn.performed += instance.OnReaderIn;
            @ReaderIn.canceled += instance.OnReaderIn;
            @ReaderOut.started += instance.OnReaderOut;
            @ReaderOut.performed += instance.OnReaderOut;
            @ReaderOut.canceled += instance.OnReaderOut;
            @InventoryInOut.started += instance.OnInventoryInOut;
            @InventoryInOut.performed += instance.OnInventoryInOut;
            @InventoryInOut.canceled += instance.OnInventoryInOut;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="UIActions" />
        private void UnregisterCallbacks(IUIActions instance)
        {
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @ReaderIn.started -= instance.OnReaderIn;
            @ReaderIn.performed -= instance.OnReaderIn;
            @ReaderIn.canceled -= instance.OnReaderIn;
            @ReaderOut.started -= instance.OnReaderOut;
            @ReaderOut.performed -= instance.OnReaderOut;
            @ReaderOut.canceled -= instance.OnReaderOut;
            @InventoryInOut.started -= instance.OnInventoryInOut;
            @InventoryInOut.performed -= instance.OnInventoryInOut;
            @InventoryInOut.canceled -= instance.OnInventoryInOut;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="UIActions.UnregisterCallbacks(IUIActions)" />.
        /// </summary>
        /// <seealso cref="UIActions.UnregisterCallbacks(IUIActions)" />
        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="UIActions.AddCallbacks(IUIActions)" />
        /// <seealso cref="UIActions.RemoveCallbacks(IUIActions)" />
        /// <seealso cref="UIActions.UnregisterCallbacks(IUIActions)" />
        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="UIActions" /> instance referencing this action map.
    /// </summary>
    public UIActions @UI => new UIActions(this);

    // Chair
    private readonly InputActionMap m_Chair;
    private List<IChairActions> m_ChairActionsCallbackInterfaces = new List<IChairActions>();
    private readonly InputAction m_Chair_Release;
    /// <summary>
    /// Provides access to input actions defined in input action map "Chair".
    /// </summary>
    public struct ChairActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public ChairActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Chair/Release".
        /// </summary>
        public InputAction @Release => m_Wrapper.m_Chair_Release;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Chair; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="ChairActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(ChairActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="ChairActions" />
        public void AddCallbacks(IChairActions instance)
        {
            if (instance == null || m_Wrapper.m_ChairActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ChairActionsCallbackInterfaces.Add(instance);
            @Release.started += instance.OnRelease;
            @Release.performed += instance.OnRelease;
            @Release.canceled += instance.OnRelease;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="ChairActions" />
        private void UnregisterCallbacks(IChairActions instance)
        {
            @Release.started -= instance.OnRelease;
            @Release.performed -= instance.OnRelease;
            @Release.canceled -= instance.OnRelease;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="ChairActions.UnregisterCallbacks(IChairActions)" />.
        /// </summary>
        /// <seealso cref="ChairActions.UnregisterCallbacks(IChairActions)" />
        public void RemoveCallbacks(IChairActions instance)
        {
            if (m_Wrapper.m_ChairActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="ChairActions.AddCallbacks(IChairActions)" />
        /// <seealso cref="ChairActions.RemoveCallbacks(IChairActions)" />
        /// <seealso cref="ChairActions.UnregisterCallbacks(IChairActions)" />
        public void SetCallbacks(IChairActions instance)
        {
            foreach (var item in m_Wrapper.m_ChairActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ChairActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="ChairActions" /> instance referencing this action map.
    /// </summary>
    public ChairActions @Chair => new ChairActions(this);

    // Car
    private readonly InputActionMap m_Car;
    private List<ICarActions> m_CarActionsCallbackInterfaces = new List<ICarActions>();
    private readonly InputAction m_Car_Power;
    private readonly InputAction m_Car_Start;
    private readonly InputAction m_Car_Move;
    private readonly InputAction m_Car_ReverseMove;
    /// <summary>
    /// Provides access to input actions defined in input action map "Car".
    /// </summary>
    public struct CarActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public CarActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Car/Power".
        /// </summary>
        public InputAction @Power => m_Wrapper.m_Car_Power;
        /// <summary>
        /// Provides access to the underlying input action "Car/Start".
        /// </summary>
        public InputAction @Start => m_Wrapper.m_Car_Start;
        /// <summary>
        /// Provides access to the underlying input action "Car/Move".
        /// </summary>
        public InputAction @Move => m_Wrapper.m_Car_Move;
        /// <summary>
        /// Provides access to the underlying input action "Car/ReverseMove".
        /// </summary>
        public InputAction @ReverseMove => m_Wrapper.m_Car_ReverseMove;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Car; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="CarActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(CarActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="CarActions" />
        public void AddCallbacks(ICarActions instance)
        {
            if (instance == null || m_Wrapper.m_CarActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CarActionsCallbackInterfaces.Add(instance);
            @Power.started += instance.OnPower;
            @Power.performed += instance.OnPower;
            @Power.canceled += instance.OnPower;
            @Start.started += instance.OnStart;
            @Start.performed += instance.OnStart;
            @Start.canceled += instance.OnStart;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @ReverseMove.started += instance.OnReverseMove;
            @ReverseMove.performed += instance.OnReverseMove;
            @ReverseMove.canceled += instance.OnReverseMove;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="CarActions" />
        private void UnregisterCallbacks(ICarActions instance)
        {
            @Power.started -= instance.OnPower;
            @Power.performed -= instance.OnPower;
            @Power.canceled -= instance.OnPower;
            @Start.started -= instance.OnStart;
            @Start.performed -= instance.OnStart;
            @Start.canceled -= instance.OnStart;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @ReverseMove.started -= instance.OnReverseMove;
            @ReverseMove.performed -= instance.OnReverseMove;
            @ReverseMove.canceled -= instance.OnReverseMove;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="CarActions.UnregisterCallbacks(ICarActions)" />.
        /// </summary>
        /// <seealso cref="CarActions.UnregisterCallbacks(ICarActions)" />
        public void RemoveCallbacks(ICarActions instance)
        {
            if (m_Wrapper.m_CarActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="CarActions.AddCallbacks(ICarActions)" />
        /// <seealso cref="CarActions.RemoveCallbacks(ICarActions)" />
        /// <seealso cref="CarActions.UnregisterCallbacks(ICarActions)" />
        public void SetCallbacks(ICarActions instance)
        {
            foreach (var item in m_Wrapper.m_CarActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CarActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="CarActions" /> instance referencing this action map.
    /// </summary>
    public CarActions @Car => new CarActions(this);

    // Note
    private readonly InputActionMap m_Note;
    private List<INoteActions> m_NoteActionsCallbackInterfaces = new List<INoteActions>();
    private readonly InputAction m_Note_Collect;
    /// <summary>
    /// Provides access to input actions defined in input action map "Note".
    /// </summary>
    public struct NoteActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public NoteActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Note/Collect".
        /// </summary>
        public InputAction @Collect => m_Wrapper.m_Note_Collect;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Note; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="NoteActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(NoteActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="NoteActions" />
        public void AddCallbacks(INoteActions instance)
        {
            if (instance == null || m_Wrapper.m_NoteActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NoteActionsCallbackInterfaces.Add(instance);
            @Collect.started += instance.OnCollect;
            @Collect.performed += instance.OnCollect;
            @Collect.canceled += instance.OnCollect;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="NoteActions" />
        private void UnregisterCallbacks(INoteActions instance)
        {
            @Collect.started -= instance.OnCollect;
            @Collect.performed -= instance.OnCollect;
            @Collect.canceled -= instance.OnCollect;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="NoteActions.UnregisterCallbacks(INoteActions)" />.
        /// </summary>
        /// <seealso cref="NoteActions.UnregisterCallbacks(INoteActions)" />
        public void RemoveCallbacks(INoteActions instance)
        {
            if (m_Wrapper.m_NoteActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="NoteActions.AddCallbacks(INoteActions)" />
        /// <seealso cref="NoteActions.RemoveCallbacks(INoteActions)" />
        /// <seealso cref="NoteActions.UnregisterCallbacks(INoteActions)" />
        public void SetCallbacks(INoteActions instance)
        {
            foreach (var item in m_Wrapper.m_NoteActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NoteActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="NoteActions" /> instance referencing this action map.
    /// </summary>
    public NoteActions @Note => new NoteActions(this);

    // Journal
    private readonly InputActionMap m_Journal;
    private List<IJournalActions> m_JournalActionsCallbackInterfaces = new List<IJournalActions>();
    private readonly InputAction m_Journal_Next;
    private readonly InputAction m_Journal_Previous;
    /// <summary>
    /// Provides access to input actions defined in input action map "Journal".
    /// </summary>
    public struct JournalActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public JournalActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Journal/Next".
        /// </summary>
        public InputAction @Next => m_Wrapper.m_Journal_Next;
        /// <summary>
        /// Provides access to the underlying input action "Journal/Previous".
        /// </summary>
        public InputAction @Previous => m_Wrapper.m_Journal_Previous;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Journal; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="JournalActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(JournalActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="JournalActions" />
        public void AddCallbacks(IJournalActions instance)
        {
            if (instance == null || m_Wrapper.m_JournalActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_JournalActionsCallbackInterfaces.Add(instance);
            @Next.started += instance.OnNext;
            @Next.performed += instance.OnNext;
            @Next.canceled += instance.OnNext;
            @Previous.started += instance.OnPrevious;
            @Previous.performed += instance.OnPrevious;
            @Previous.canceled += instance.OnPrevious;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="JournalActions" />
        private void UnregisterCallbacks(IJournalActions instance)
        {
            @Next.started -= instance.OnNext;
            @Next.performed -= instance.OnNext;
            @Next.canceled -= instance.OnNext;
            @Previous.started -= instance.OnPrevious;
            @Previous.performed -= instance.OnPrevious;
            @Previous.canceled -= instance.OnPrevious;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="JournalActions.UnregisterCallbacks(IJournalActions)" />.
        /// </summary>
        /// <seealso cref="JournalActions.UnregisterCallbacks(IJournalActions)" />
        public void RemoveCallbacks(IJournalActions instance)
        {
            if (m_Wrapper.m_JournalActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="JournalActions.AddCallbacks(IJournalActions)" />
        /// <seealso cref="JournalActions.RemoveCallbacks(IJournalActions)" />
        /// <seealso cref="JournalActions.UnregisterCallbacks(IJournalActions)" />
        public void SetCallbacks(IJournalActions instance)
        {
            foreach (var item in m_Wrapper.m_JournalActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_JournalActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="JournalActions" /> instance referencing this action map.
    /// </summary>
    public JournalActions @Journal => new JournalActions(this);

    // LobbyPlayer
    private readonly InputActionMap m_LobbyPlayer;
    private List<ILobbyPlayerActions> m_LobbyPlayerActionsCallbackInterfaces = new List<ILobbyPlayerActions>();
    private readonly InputAction m_LobbyPlayer_Ready;
    private readonly InputAction m_LobbyPlayer_MessageSend;
    private readonly InputAction m_LobbyPlayer_Return;
    /// <summary>
    /// Provides access to input actions defined in input action map "LobbyPlayer".
    /// </summary>
    public struct LobbyPlayerActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public LobbyPlayerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "LobbyPlayer/Ready".
        /// </summary>
        public InputAction @Ready => m_Wrapper.m_LobbyPlayer_Ready;
        /// <summary>
        /// Provides access to the underlying input action "LobbyPlayer/MessageSend".
        /// </summary>
        public InputAction @MessageSend => m_Wrapper.m_LobbyPlayer_MessageSend;
        /// <summary>
        /// Provides access to the underlying input action "LobbyPlayer/Return".
        /// </summary>
        public InputAction @Return => m_Wrapper.m_LobbyPlayer_Return;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_LobbyPlayer; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="LobbyPlayerActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(LobbyPlayerActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="LobbyPlayerActions" />
        public void AddCallbacks(ILobbyPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_LobbyPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LobbyPlayerActionsCallbackInterfaces.Add(instance);
            @Ready.started += instance.OnReady;
            @Ready.performed += instance.OnReady;
            @Ready.canceled += instance.OnReady;
            @MessageSend.started += instance.OnMessageSend;
            @MessageSend.performed += instance.OnMessageSend;
            @MessageSend.canceled += instance.OnMessageSend;
            @Return.started += instance.OnReturn;
            @Return.performed += instance.OnReturn;
            @Return.canceled += instance.OnReturn;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="LobbyPlayerActions" />
        private void UnregisterCallbacks(ILobbyPlayerActions instance)
        {
            @Ready.started -= instance.OnReady;
            @Ready.performed -= instance.OnReady;
            @Ready.canceled -= instance.OnReady;
            @MessageSend.started -= instance.OnMessageSend;
            @MessageSend.performed -= instance.OnMessageSend;
            @MessageSend.canceled -= instance.OnMessageSend;
            @Return.started -= instance.OnReturn;
            @Return.performed -= instance.OnReturn;
            @Return.canceled -= instance.OnReturn;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="LobbyPlayerActions.UnregisterCallbacks(ILobbyPlayerActions)" />.
        /// </summary>
        /// <seealso cref="LobbyPlayerActions.UnregisterCallbacks(ILobbyPlayerActions)" />
        public void RemoveCallbacks(ILobbyPlayerActions instance)
        {
            if (m_Wrapper.m_LobbyPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="LobbyPlayerActions.AddCallbacks(ILobbyPlayerActions)" />
        /// <seealso cref="LobbyPlayerActions.RemoveCallbacks(ILobbyPlayerActions)" />
        /// <seealso cref="LobbyPlayerActions.UnregisterCallbacks(ILobbyPlayerActions)" />
        public void SetCallbacks(ILobbyPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_LobbyPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LobbyPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="LobbyPlayerActions" /> instance referencing this action map.
    /// </summary>
    public LobbyPlayerActions @LobbyPlayer => new LobbyPlayerActions(this);

    // Device
    private readonly InputActionMap m_Device;
    private List<IDeviceActions> m_DeviceActionsCallbackInterfaces = new List<IDeviceActions>();
    private readonly InputAction m_Device_Use;
    private readonly InputAction m_Device_Exit;
    /// <summary>
    /// Provides access to input actions defined in input action map "Device".
    /// </summary>
    public struct DeviceActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public DeviceActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Device/Use".
        /// </summary>
        public InputAction @Use => m_Wrapper.m_Device_Use;
        /// <summary>
        /// Provides access to the underlying input action "Device/Exit".
        /// </summary>
        public InputAction @Exit => m_Wrapper.m_Device_Exit;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Device; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="DeviceActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(DeviceActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="DeviceActions" />
        public void AddCallbacks(IDeviceActions instance)
        {
            if (instance == null || m_Wrapper.m_DeviceActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DeviceActionsCallbackInterfaces.Add(instance);
            @Use.started += instance.OnUse;
            @Use.performed += instance.OnUse;
            @Use.canceled += instance.OnUse;
            @Exit.started += instance.OnExit;
            @Exit.performed += instance.OnExit;
            @Exit.canceled += instance.OnExit;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="DeviceActions" />
        private void UnregisterCallbacks(IDeviceActions instance)
        {
            @Use.started -= instance.OnUse;
            @Use.performed -= instance.OnUse;
            @Use.canceled -= instance.OnUse;
            @Exit.started -= instance.OnExit;
            @Exit.performed -= instance.OnExit;
            @Exit.canceled -= instance.OnExit;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="DeviceActions.UnregisterCallbacks(IDeviceActions)" />.
        /// </summary>
        /// <seealso cref="DeviceActions.UnregisterCallbacks(IDeviceActions)" />
        public void RemoveCallbacks(IDeviceActions instance)
        {
            if (m_Wrapper.m_DeviceActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="DeviceActions.AddCallbacks(IDeviceActions)" />
        /// <seealso cref="DeviceActions.RemoveCallbacks(IDeviceActions)" />
        /// <seealso cref="DeviceActions.UnregisterCallbacks(IDeviceActions)" />
        public void SetCallbacks(IDeviceActions instance)
        {
            foreach (var item in m_Wrapper.m_DeviceActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DeviceActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="DeviceActions" /> instance referencing this action map.
    /// </summary>
    public DeviceActions @Device => new DeviceActions(this);

    // Tool
    private readonly InputActionMap m_Tool;
    private List<IToolActions> m_ToolActionsCallbackInterfaces = new List<IToolActions>();
    private readonly InputAction m_Tool_Operate;
    /// <summary>
    /// Provides access to input actions defined in input action map "Tool".
    /// </summary>
    public struct ToolActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public ToolActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Tool/Operate".
        /// </summary>
        public InputAction @Operate => m_Wrapper.m_Tool_Operate;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Tool; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="ToolActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(ToolActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="ToolActions" />
        public void AddCallbacks(IToolActions instance)
        {
            if (instance == null || m_Wrapper.m_ToolActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ToolActionsCallbackInterfaces.Add(instance);
            @Operate.started += instance.OnOperate;
            @Operate.performed += instance.OnOperate;
            @Operate.canceled += instance.OnOperate;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="ToolActions" />
        private void UnregisterCallbacks(IToolActions instance)
        {
            @Operate.started -= instance.OnOperate;
            @Operate.performed -= instance.OnOperate;
            @Operate.canceled -= instance.OnOperate;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="ToolActions.UnregisterCallbacks(IToolActions)" />.
        /// </summary>
        /// <seealso cref="ToolActions.UnregisterCallbacks(IToolActions)" />
        public void RemoveCallbacks(IToolActions instance)
        {
            if (m_Wrapper.m_ToolActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="ToolActions.AddCallbacks(IToolActions)" />
        /// <seealso cref="ToolActions.RemoveCallbacks(IToolActions)" />
        /// <seealso cref="ToolActions.UnregisterCallbacks(IToolActions)" />
        public void SetCallbacks(IToolActions instance)
        {
            foreach (var item in m_Wrapper.m_ToolActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ToolActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="ToolActions" /> instance referencing this action map.
    /// </summary>
    public ToolActions @Tool => new ToolActions(this);

    // PillBottle
    private readonly InputActionMap m_PillBottle;
    private List<IPillBottleActions> m_PillBottleActionsCallbackInterfaces = new List<IPillBottleActions>();
    private readonly InputAction m_PillBottle_TakePill;
    /// <summary>
    /// Provides access to input actions defined in input action map "PillBottle".
    /// </summary>
    public struct PillBottleActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public PillBottleActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "PillBottle/TakePill".
        /// </summary>
        public InputAction @TakePill => m_Wrapper.m_PillBottle_TakePill;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_PillBottle; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="PillBottleActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(PillBottleActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="PillBottleActions" />
        public void AddCallbacks(IPillBottleActions instance)
        {
            if (instance == null || m_Wrapper.m_PillBottleActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PillBottleActionsCallbackInterfaces.Add(instance);
            @TakePill.started += instance.OnTakePill;
            @TakePill.performed += instance.OnTakePill;
            @TakePill.canceled += instance.OnTakePill;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="PillBottleActions" />
        private void UnregisterCallbacks(IPillBottleActions instance)
        {
            @TakePill.started -= instance.OnTakePill;
            @TakePill.performed -= instance.OnTakePill;
            @TakePill.canceled -= instance.OnTakePill;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="PillBottleActions.UnregisterCallbacks(IPillBottleActions)" />.
        /// </summary>
        /// <seealso cref="PillBottleActions.UnregisterCallbacks(IPillBottleActions)" />
        public void RemoveCallbacks(IPillBottleActions instance)
        {
            if (m_Wrapper.m_PillBottleActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="PillBottleActions.AddCallbacks(IPillBottleActions)" />
        /// <seealso cref="PillBottleActions.RemoveCallbacks(IPillBottleActions)" />
        /// <seealso cref="PillBottleActions.UnregisterCallbacks(IPillBottleActions)" />
        public void SetCallbacks(IPillBottleActions instance)
        {
            foreach (var item in m_Wrapper.m_PillBottleActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PillBottleActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="PillBottleActions" /> instance referencing this action map.
    /// </summary>
    public PillBottleActions @PillBottle => new PillBottleActions(this);

    // Flashlight
    private readonly InputActionMap m_Flashlight;
    private List<IFlashlightActions> m_FlashlightActionsCallbackInterfaces = new List<IFlashlightActions>();
    private readonly InputAction m_Flashlight_Switch;
    /// <summary>
    /// Provides access to input actions defined in input action map "Flashlight".
    /// </summary>
    public struct FlashlightActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public FlashlightActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Flashlight/Switch".
        /// </summary>
        public InputAction @Switch => m_Wrapper.m_Flashlight_Switch;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Flashlight; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="FlashlightActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(FlashlightActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="FlashlightActions" />
        public void AddCallbacks(IFlashlightActions instance)
        {
            if (instance == null || m_Wrapper.m_FlashlightActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FlashlightActionsCallbackInterfaces.Add(instance);
            @Switch.started += instance.OnSwitch;
            @Switch.performed += instance.OnSwitch;
            @Switch.canceled += instance.OnSwitch;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="FlashlightActions" />
        private void UnregisterCallbacks(IFlashlightActions instance)
        {
            @Switch.started -= instance.OnSwitch;
            @Switch.performed -= instance.OnSwitch;
            @Switch.canceled -= instance.OnSwitch;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="FlashlightActions.UnregisterCallbacks(IFlashlightActions)" />.
        /// </summary>
        /// <seealso cref="FlashlightActions.UnregisterCallbacks(IFlashlightActions)" />
        public void RemoveCallbacks(IFlashlightActions instance)
        {
            if (m_Wrapper.m_FlashlightActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="FlashlightActions.AddCallbacks(IFlashlightActions)" />
        /// <seealso cref="FlashlightActions.RemoveCallbacks(IFlashlightActions)" />
        /// <seealso cref="FlashlightActions.UnregisterCallbacks(IFlashlightActions)" />
        public void SetCallbacks(IFlashlightActions instance)
        {
            foreach (var item in m_Wrapper.m_FlashlightActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FlashlightActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="FlashlightActions" /> instance referencing this action map.
    /// </summary>
    public FlashlightActions @Flashlight => new FlashlightActions(this);

    // Spectate
    private readonly InputActionMap m_Spectate;
    private List<ISpectateActions> m_SpectateActionsCallbackInterfaces = new List<ISpectateActions>();
    private readonly InputAction m_Spectate_Next;
    /// <summary>
    /// Provides access to input actions defined in input action map "Spectate".
    /// </summary>
    public struct SpectateActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public SpectateActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Spectate/Next".
        /// </summary>
        public InputAction @Next => m_Wrapper.m_Spectate_Next;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Spectate; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="SpectateActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(SpectateActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="SpectateActions" />
        public void AddCallbacks(ISpectateActions instance)
        {
            if (instance == null || m_Wrapper.m_SpectateActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SpectateActionsCallbackInterfaces.Add(instance);
            @Next.started += instance.OnNext;
            @Next.performed += instance.OnNext;
            @Next.canceled += instance.OnNext;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="SpectateActions" />
        private void UnregisterCallbacks(ISpectateActions instance)
        {
            @Next.started -= instance.OnNext;
            @Next.performed -= instance.OnNext;
            @Next.canceled -= instance.OnNext;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="SpectateActions.UnregisterCallbacks(ISpectateActions)" />.
        /// </summary>
        /// <seealso cref="SpectateActions.UnregisterCallbacks(ISpectateActions)" />
        public void RemoveCallbacks(ISpectateActions instance)
        {
            if (m_Wrapper.m_SpectateActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="SpectateActions.AddCallbacks(ISpectateActions)" />
        /// <seealso cref="SpectateActions.RemoveCallbacks(ISpectateActions)" />
        /// <seealso cref="SpectateActions.UnregisterCallbacks(ISpectateActions)" />
        public void SetCallbacks(ISpectateActions instance)
        {
            foreach (var item in m_Wrapper.m_SpectateActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SpectateActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="SpectateActions" /> instance referencing this action map.
    /// </summary>
    public SpectateActions @Spectate => new SpectateActions(this);

    // FocusObject
    private readonly InputActionMap m_FocusObject;
    private List<IFocusObjectActions> m_FocusObjectActionsCallbackInterfaces = new List<IFocusObjectActions>();
    private readonly InputAction m_FocusObject_Release;
    /// <summary>
    /// Provides access to input actions defined in input action map "FocusObject".
    /// </summary>
    public struct FocusObjectActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public FocusObjectActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "FocusObject/Release".
        /// </summary>
        public InputAction @Release => m_Wrapper.m_FocusObject_Release;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_FocusObject; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="FocusObjectActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(FocusObjectActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="FocusObjectActions" />
        public void AddCallbacks(IFocusObjectActions instance)
        {
            if (instance == null || m_Wrapper.m_FocusObjectActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FocusObjectActionsCallbackInterfaces.Add(instance);
            @Release.started += instance.OnRelease;
            @Release.performed += instance.OnRelease;
            @Release.canceled += instance.OnRelease;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="FocusObjectActions" />
        private void UnregisterCallbacks(IFocusObjectActions instance)
        {
            @Release.started -= instance.OnRelease;
            @Release.performed -= instance.OnRelease;
            @Release.canceled -= instance.OnRelease;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="FocusObjectActions.UnregisterCallbacks(IFocusObjectActions)" />.
        /// </summary>
        /// <seealso cref="FocusObjectActions.UnregisterCallbacks(IFocusObjectActions)" />
        public void RemoveCallbacks(IFocusObjectActions instance)
        {
            if (m_Wrapper.m_FocusObjectActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="FocusObjectActions.AddCallbacks(IFocusObjectActions)" />
        /// <seealso cref="FocusObjectActions.RemoveCallbacks(IFocusObjectActions)" />
        /// <seealso cref="FocusObjectActions.UnregisterCallbacks(IFocusObjectActions)" />
        public void SetCallbacks(IFocusObjectActions instance)
        {
            foreach (var item in m_Wrapper.m_FocusObjectActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FocusObjectActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="FocusObjectActions" /> instance referencing this action map.
    /// </summary>
    public FocusObjectActions @FocusObject => new FocusObjectActions(this);

    // Inventory
    private readonly InputActionMap m_Inventory;
    private List<IInventoryActions> m_InventoryActionsCallbackInterfaces = new List<IInventoryActions>();
    private readonly InputAction m_Inventory_GetFirstInventorySlot;
    private readonly InputAction m_Inventory_InventoryInOut;
    /// <summary>
    /// Provides access to input actions defined in input action map "Inventory".
    /// </summary>
    public struct InventoryActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public InventoryActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Inventory/GetFirstInventorySlot".
        /// </summary>
        public InputAction @GetFirstInventorySlot => m_Wrapper.m_Inventory_GetFirstInventorySlot;
        /// <summary>
        /// Provides access to the underlying input action "Inventory/InventoryInOut".
        /// </summary>
        public InputAction @InventoryInOut => m_Wrapper.m_Inventory_InventoryInOut;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Inventory; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="InventoryActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(InventoryActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="InventoryActions" />
        public void AddCallbacks(IInventoryActions instance)
        {
            if (instance == null || m_Wrapper.m_InventoryActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InventoryActionsCallbackInterfaces.Add(instance);
            @GetFirstInventorySlot.started += instance.OnGetFirstInventorySlot;
            @GetFirstInventorySlot.performed += instance.OnGetFirstInventorySlot;
            @GetFirstInventorySlot.canceled += instance.OnGetFirstInventorySlot;
            @InventoryInOut.started += instance.OnInventoryInOut;
            @InventoryInOut.performed += instance.OnInventoryInOut;
            @InventoryInOut.canceled += instance.OnInventoryInOut;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="InventoryActions" />
        private void UnregisterCallbacks(IInventoryActions instance)
        {
            @GetFirstInventorySlot.started -= instance.OnGetFirstInventorySlot;
            @GetFirstInventorySlot.performed -= instance.OnGetFirstInventorySlot;
            @GetFirstInventorySlot.canceled -= instance.OnGetFirstInventorySlot;
            @InventoryInOut.started -= instance.OnInventoryInOut;
            @InventoryInOut.performed -= instance.OnInventoryInOut;
            @InventoryInOut.canceled -= instance.OnInventoryInOut;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="InventoryActions.UnregisterCallbacks(IInventoryActions)" />.
        /// </summary>
        /// <seealso cref="InventoryActions.UnregisterCallbacks(IInventoryActions)" />
        public void RemoveCallbacks(IInventoryActions instance)
        {
            if (m_Wrapper.m_InventoryActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="InventoryActions.AddCallbacks(IInventoryActions)" />
        /// <seealso cref="InventoryActions.RemoveCallbacks(IInventoryActions)" />
        /// <seealso cref="InventoryActions.UnregisterCallbacks(IInventoryActions)" />
        public void SetCallbacks(IInventoryActions instance)
        {
            foreach (var item in m_Wrapper.m_InventoryActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InventoryActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="InventoryActions" /> instance referencing this action map.
    /// </summary>
    public InventoryActions @Inventory => new InventoryActions(this);

    // Development
    private readonly InputActionMap m_Development;
    private List<IDevelopmentActions> m_DevelopmentActionsCallbackInterfaces = new List<IDevelopmentActions>();
    private readonly InputAction m_Development_console;
    private readonly InputAction m_Development_consoleEnter;
    /// <summary>
    /// Provides access to input actions defined in input action map "Development".
    /// </summary>
    public struct DevelopmentActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public DevelopmentActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Development/console".
        /// </summary>
        public InputAction @console => m_Wrapper.m_Development_console;
        /// <summary>
        /// Provides access to the underlying input action "Development/consoleEnter".
        /// </summary>
        public InputAction @consoleEnter => m_Wrapper.m_Development_consoleEnter;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Development; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="DevelopmentActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(DevelopmentActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="DevelopmentActions" />
        public void AddCallbacks(IDevelopmentActions instance)
        {
            if (instance == null || m_Wrapper.m_DevelopmentActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DevelopmentActionsCallbackInterfaces.Add(instance);
            @console.started += instance.OnConsole;
            @console.performed += instance.OnConsole;
            @console.canceled += instance.OnConsole;
            @consoleEnter.started += instance.OnConsoleEnter;
            @consoleEnter.performed += instance.OnConsoleEnter;
            @consoleEnter.canceled += instance.OnConsoleEnter;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="DevelopmentActions" />
        private void UnregisterCallbacks(IDevelopmentActions instance)
        {
            @console.started -= instance.OnConsole;
            @console.performed -= instance.OnConsole;
            @console.canceled -= instance.OnConsole;
            @consoleEnter.started -= instance.OnConsoleEnter;
            @consoleEnter.performed -= instance.OnConsoleEnter;
            @consoleEnter.canceled -= instance.OnConsoleEnter;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="DevelopmentActions.UnregisterCallbacks(IDevelopmentActions)" />.
        /// </summary>
        /// <seealso cref="DevelopmentActions.UnregisterCallbacks(IDevelopmentActions)" />
        public void RemoveCallbacks(IDevelopmentActions instance)
        {
            if (m_Wrapper.m_DevelopmentActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="DevelopmentActions.AddCallbacks(IDevelopmentActions)" />
        /// <seealso cref="DevelopmentActions.RemoveCallbacks(IDevelopmentActions)" />
        /// <seealso cref="DevelopmentActions.UnregisterCallbacks(IDevelopmentActions)" />
        public void SetCallbacks(IDevelopmentActions instance)
        {
            foreach (var item in m_Wrapper.m_DevelopmentActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DevelopmentActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="DevelopmentActions" /> instance referencing this action map.
    /// </summary>
    public DevelopmentActions @Development => new DevelopmentActions(this);

    // Lockpick
    private readonly InputActionMap m_Lockpick;
    private List<ILockpickActions> m_LockpickActionsCallbackInterfaces = new List<ILockpickActions>();
    private readonly InputAction m_Lockpick_lockpickActions;
    /// <summary>
    /// Provides access to input actions defined in input action map "Lockpick".
    /// </summary>
    public struct LockpickActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public LockpickActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Lockpick/lockpickActions".
        /// </summary>
        public InputAction @lockpickActions => m_Wrapper.m_Lockpick_lockpickActions;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Lockpick; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="LockpickActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(LockpickActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="LockpickActions" />
        public void AddCallbacks(ILockpickActions instance)
        {
            if (instance == null || m_Wrapper.m_LockpickActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LockpickActionsCallbackInterfaces.Add(instance);
            @lockpickActions.started += instance.OnLockpickActions;
            @lockpickActions.performed += instance.OnLockpickActions;
            @lockpickActions.canceled += instance.OnLockpickActions;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="LockpickActions" />
        private void UnregisterCallbacks(ILockpickActions instance)
        {
            @lockpickActions.started -= instance.OnLockpickActions;
            @lockpickActions.performed -= instance.OnLockpickActions;
            @lockpickActions.canceled -= instance.OnLockpickActions;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="LockpickActions.UnregisterCallbacks(ILockpickActions)" />.
        /// </summary>
        /// <seealso cref="LockpickActions.UnregisterCallbacks(ILockpickActions)" />
        public void RemoveCallbacks(ILockpickActions instance)
        {
            if (m_Wrapper.m_LockpickActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="LockpickActions.AddCallbacks(ILockpickActions)" />
        /// <seealso cref="LockpickActions.RemoveCallbacks(ILockpickActions)" />
        /// <seealso cref="LockpickActions.UnregisterCallbacks(ILockpickActions)" />
        public void SetCallbacks(ILockpickActions instance)
        {
            foreach (var item in m_Wrapper.m_LockpickActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LockpickActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="LockpickActions" /> instance referencing this action map.
    /// </summary>
    public LockpickActions @Lockpick => new LockpickActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Player" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="PlayerActions.AddCallbacks(IPlayerActions)" />
    /// <seealso cref="PlayerActions.RemoveCallbacks(IPlayerActions)" />
    public interface IPlayerActions
    {
        /// <summary>
        /// Method invoked when associated input action "Move" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMove(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Look" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLook(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Interact" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnInteract(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "AlternativeInteract" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAlternativeInteract(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Hold Action" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHoldAction(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Pause" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPause(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "OpenJournal" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnOpenJournal(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Crouch" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCrouch(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "DropItem" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDropItem(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Sprint" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSprint(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Highlight" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHighlight(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Inspect" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnInspect(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Tutorial" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTutorial(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Inventory" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnInventory(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "UI" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="UIActions.AddCallbacks(IUIActions)" />
    /// <seealso cref="UIActions.RemoveCallbacks(IUIActions)" />
    public interface IUIActions
    {
        /// <summary>
        /// Method invoked when associated input action "Pause" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPause(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ReaderIn" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnReaderIn(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ReaderOut" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnReaderOut(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "InventoryInOut" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnInventoryInOut(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Chair" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="ChairActions.AddCallbacks(IChairActions)" />
    /// <seealso cref="ChairActions.RemoveCallbacks(IChairActions)" />
    public interface IChairActions
    {
        /// <summary>
        /// Method invoked when associated input action "Release" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRelease(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Car" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="CarActions.AddCallbacks(ICarActions)" />
    /// <seealso cref="CarActions.RemoveCallbacks(ICarActions)" />
    public interface ICarActions
    {
        /// <summary>
        /// Method invoked when associated input action "Power" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPower(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Start" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnStart(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Move" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMove(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ReverseMove" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnReverseMove(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Note" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="NoteActions.AddCallbacks(INoteActions)" />
    /// <seealso cref="NoteActions.RemoveCallbacks(INoteActions)" />
    public interface INoteActions
    {
        /// <summary>
        /// Method invoked when associated input action "Collect" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCollect(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Journal" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="JournalActions.AddCallbacks(IJournalActions)" />
    /// <seealso cref="JournalActions.RemoveCallbacks(IJournalActions)" />
    public interface IJournalActions
    {
        /// <summary>
        /// Method invoked when associated input action "Next" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNext(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Previous" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPrevious(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "LobbyPlayer" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="LobbyPlayerActions.AddCallbacks(ILobbyPlayerActions)" />
    /// <seealso cref="LobbyPlayerActions.RemoveCallbacks(ILobbyPlayerActions)" />
    public interface ILobbyPlayerActions
    {
        /// <summary>
        /// Method invoked when associated input action "Ready" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnReady(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Message Send" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMessageSend(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Return" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnReturn(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Device" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="DeviceActions.AddCallbacks(IDeviceActions)" />
    /// <seealso cref="DeviceActions.RemoveCallbacks(IDeviceActions)" />
    public interface IDeviceActions
    {
        /// <summary>
        /// Method invoked when associated input action "Use" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUse(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Exit" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnExit(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Tool" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="ToolActions.AddCallbacks(IToolActions)" />
    /// <seealso cref="ToolActions.RemoveCallbacks(IToolActions)" />
    public interface IToolActions
    {
        /// <summary>
        /// Method invoked when associated input action "Operate" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnOperate(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "PillBottle" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="PillBottleActions.AddCallbacks(IPillBottleActions)" />
    /// <seealso cref="PillBottleActions.RemoveCallbacks(IPillBottleActions)" />
    public interface IPillBottleActions
    {
        /// <summary>
        /// Method invoked when associated input action "TakePill" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTakePill(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Flashlight" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="FlashlightActions.AddCallbacks(IFlashlightActions)" />
    /// <seealso cref="FlashlightActions.RemoveCallbacks(IFlashlightActions)" />
    public interface IFlashlightActions
    {
        /// <summary>
        /// Method invoked when associated input action "Switch" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSwitch(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Spectate" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="SpectateActions.AddCallbacks(ISpectateActions)" />
    /// <seealso cref="SpectateActions.RemoveCallbacks(ISpectateActions)" />
    public interface ISpectateActions
    {
        /// <summary>
        /// Method invoked when associated input action "Next" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNext(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "FocusObject" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="FocusObjectActions.AddCallbacks(IFocusObjectActions)" />
    /// <seealso cref="FocusObjectActions.RemoveCallbacks(IFocusObjectActions)" />
    public interface IFocusObjectActions
    {
        /// <summary>
        /// Method invoked when associated input action "Release" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRelease(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Inventory" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="InventoryActions.AddCallbacks(IInventoryActions)" />
    /// <seealso cref="InventoryActions.RemoveCallbacks(IInventoryActions)" />
    public interface IInventoryActions
    {
        /// <summary>
        /// Method invoked when associated input action "GetFirstInventorySlot" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGetFirstInventorySlot(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "InventoryInOut" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnInventoryInOut(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Development" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="DevelopmentActions.AddCallbacks(IDevelopmentActions)" />
    /// <seealso cref="DevelopmentActions.RemoveCallbacks(IDevelopmentActions)" />
    public interface IDevelopmentActions
    {
        /// <summary>
        /// Method invoked when associated input action "console" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnConsole(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "consoleEnter" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnConsoleEnter(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Lockpick" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="LockpickActions.AddCallbacks(ILockpickActions)" />
    /// <seealso cref="LockpickActions.RemoveCallbacks(ILockpickActions)" />
    public interface ILockpickActions
    {
        /// <summary>
        /// Method invoked when associated input action "lockpickActions" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLockpickActions(InputAction.CallbackContext context);
    }
}
